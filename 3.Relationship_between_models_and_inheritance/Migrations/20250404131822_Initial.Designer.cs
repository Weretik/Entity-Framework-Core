// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _3.Relationship_between_models_and_inheritance;

#nullable disable

namespace _3.Relationship_between_models_and_inheritance.Migrations
{
    [DbContext(typeof(ProductdbContext))]
    [Migration("20250404131822_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.KeyParams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("KeyWordsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KeyWordsId");

                    b.HasIndex("ProductId");

                    b.ToTable("KeyParams");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("ActionPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionField1")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionField2")
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.Word", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<string>("KeyWord")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Word");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.Cart", b =>
                {
                    b.HasOne("_3.Relationship_between_models_and_inheritance.Product", "Product")
                        .WithMany("Cart")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_3.Relationship_between_models_and_inheritance.User", "User")
                        .WithMany("Cart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.KeyParams", b =>
                {
                    b.HasOne("_3.Relationship_between_models_and_inheritance.Word", "KeyWords")
                        .WithMany("ProductLink")
                        .HasForeignKey("KeyWordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_3.Relationship_between_models_and_inheritance.Product", "Product")
                        .WithMany("KeyWords")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyWords");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.Product", b =>
                {
                    b.HasOne("_3.Relationship_between_models_and_inheritance.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.Product", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("KeyWords");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.User", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("_3.Relationship_between_models_and_inheritance.Word", b =>
                {
                    b.Navigation("ProductLink");
                });
#pragma warning restore 612, 618
        }
    }
}
